node{
    def scmVars = checkout([
    $class : 'GitSCM',
               branches : [[name: '*/Development']],
               doGenerateSubmoduleConfigurations: false,
               extensions : [[$class: 'CleanBeforeCheckout']],
               submoduleCfg : [],
               //userRemoteConfigs: [[credentialsId: 'local-bb', url: 'http://admin@localhost:7990/bitbucket/scm/project_1/rep_1.git']]
           ])
	stage('SCM Checkout'){
	git url: 'https://github.com/qa-concourse/QA_Apartment_manager_Front.git'
	}
	stage('SCM Checkout'){
	sh 'git checkout Development'
	sh 'git pull'
	}
	stage('Sonarqube') {
	    sh '/sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner -Dsonar.host.url=http://52.18.14.235:9000 -Dsonar.projectKey=1 -Dsonar.sources=. -Dsonar.login=7ab57d87a0a3b95ab041077ad51b4ec4b071fd46'      
	}
    }
def dockerRemove = 'docker rm -f qa_apt_front'
def dockerPull = 'docker pull qacdocker/concourse:latestaptfront'
def dockerRunAptFront = 'docker run -d -p 3000:3000 qacdocker/concourse:latestaptfront'
def dockerLogin = 'docker login --username $user --password $pass'
pipeline {
    agent any
    stages {
        stage('Docker Build Image, Tag Image, Upload to Docker Repo'){
            steps{
                sh 'docker build -t qa_concourse/concourse:latestaptfront ./'
                withCredentials([usernamePassword(credentialsId: 'dockerhubcred', passwordVariable: 'pass', usernameVariable: 'user')]) {
                sh 'docker login --username $user --password $pass'
                sh 'docker push qacdocker/concourse:latestaptfront'
                }
            }
        }
        // stage('Approval'){
        //     steps{
        //       emailext (
        //         attachLog: true,
        //         subject: 'Build#$BUILD_NUMBER-APPROVAL REQUIRED',
        //         body: '$DEFAULT_CONTENT',
        //         recipientProviders: [
        //             [$class: 'DevelopersRecipientProvider'],
        //             [$class: 'RequesterRecipientProvider']
        //             ],
        //             replyTo: '$DEFAULT_REPLYTO',
        //             to: '$DEFAULT_RECIPIENTS'
        //         )
        //             timeout(time:5, unit:'DAYS'){
        //                 input 'Do you approve deployment?'
        //             }
        //         }
        //     }
        stage('Connect to remote server, remove old container and run new'){
        steps {
               withCredentials([usernamePassword(credentialsId: 'dockerhubcred', passwordVariable: 'pass', usernameVariable: 'user')]) {
                sshagent(['c22ed190-9f47-4a83-8781-ff54ce723c9c']) {
                 sh "ssh -tt -o StrictHostKeyChecking=no ubuntu@18.203.253.227 ${dockerLogin}"
                 sh "ssh -tt -o StrictHostKeyChecking=no ubuntu@18.203.253.227 ${dockerPull}"
                 sh "ssh -tt -o StrictHostKeyChecking=no ubuntu@18.203.253.227 ${dockerRunAptFront}"
                }
            }
        }
        }
    }
        post {
            always{
                discordSend description: 'QA_Apartment_manager_Front build from Pipeline',link: 'http://108.128.97.115/job/daryl-deployment-test/', title: 'qa-apt-front-deployment-test', successful: currentBuild.resultIsBetterOrEqualTo('SUCCESS'), webhookURL: 'https://discordapp.com/api/webhooks/${discserver}/${discordKey}'
                emailext attachLog: true,
                subject: '$DEFAULT_SUBJECT',
                body: '$DEFAULT_CONTENT',
                recipientProviders: [
                    [$class: 'DevelopersRecipientProvider'],
                    [$class: 'RequesterRecipientProvider']
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: '$DEFAULT_RECIPIENTS'
		


                    

            }
        }
}
